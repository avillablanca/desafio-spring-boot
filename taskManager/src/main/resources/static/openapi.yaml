openapi: 3.0.3
info:
  title: Task Management API
  description: API for managing tasks and users with JWT-based security.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Development server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TaskRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        taskStatusId:
          type: integer
          example: 1
        description:
          type: string
          example: Fix bugs in the login module
        dueDate:
          type: string
          format: date
          example: 2025-01-31
    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: jano
        taskStatusId:
          type: integer
          example: 1
        taskStatusName:
          type: string
          example: Asignado

        description:
          type: string
          example: Fix bugs in the login module
        dueDate:
          type: string
          format: date
          example: 2025-01-31
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: secret
    StatusTaskResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        description:
          type: string
          example: En Espera

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: secret
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJqb2huZG9lIiwiaWF0IjoxNjE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
security:
  - BearerAuth: []
paths:
  /v1/auth/login:
    post:
      summary: Authenticate a user and return a JWT token
      requestBody:
        description: User credentials for authentication
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT token returned upon successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /v1/tasks:
    get:
      summary: Get all tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
    post:
      summary: Create a new task
      security:
        - BearerAuth: []
      requestBody:
        description: Task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: Task created
  /v1/tasks/{id}:
    get:
      summary: Get a task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
    put:
      summary: Update a task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Task data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: Task updated
    delete:
      summary: Delete a task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted
  /v1/users:
    get:
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /v1/users/{id}:
    get:
      summary: Get a user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /v1/statustasks:
    get:
      summary: Get all status task
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of status tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusTaskResponse'
  /v1/statustasks/{id}:
    get:
      summary: Get a status task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusTaskResponse'
